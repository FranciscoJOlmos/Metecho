# Generated by Django 2.2.3 on 2019-07-31 16:35

import itertools

import django.db.models.deletion
from django.db import migrations, models
from django.utils.text import slugify


# Inline logic from sfdo_template_helpers.slugs:
def _find_unique_slug(slug_class, original):
    max_length = 50  # This from SlugField
    candidate = original
    # Ignore branches here because this loop should never end:
    # https://coverage.readthedocs.io/en/v4.5.x/branch.html#structurally-partial-branches
    for i in itertools.count(1):  # pragma: no branch
        if not slug_class.objects.filter(slug=candidate).exists():
            return candidate

        suffix = f"-{i}"
        candidate = candidate[: max_length - len(suffix)] + suffix


def ensure_task_slugs(apps, schema_editor):
    Task = apps.get_model("api", "Task")
    TaskSlug = apps.get_model("api", "TaskSlug")
    for task in Task.objects.all():
        if not task.slugs.filter(is_active=True).exists():
            slug = _find_unique_slug(TaskSlug, slugify(task.name))
            TaskSlug.objects.create(parent=task, slug=slug, is_active=True)


def remove_task_slugs(apps, schema_editor):
    # We'll just be dropping the table in a moment anyway, so why bother
    # manually removing them?
    pass


class Migration(migrations.Migration):

    dependencies = [("api", "0004_merge_20190727_2032")]

    operations = [
        migrations.CreateModel(
            name="TaskSlug",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "If multiple slugs are active, we will default to the most "
                            "recent."
                        ),
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="slugs",
                        to="api.Task",
                    ),
                ),
            ],
            options={"ordering": ("-created_at",), "abstract": False},
        ),
        migrations.RunPython(ensure_task_slugs, remove_task_slugs),
    ]
