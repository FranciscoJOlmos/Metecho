version: 2.1
jobs:
  build:
    working_directory: ~/metashare
    docker:
      - image: wlonk/oddbird
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-metashare-py-3.7-{{ checksum "Pipfile.lock" }}
      - restore_cache:
          keys:
            - v1-metashare-npm-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: |
            yarn
            mkdir venv
            VIRTUAL_ENV=./venv pipenv install --dev
      - run:
          name: Check that yarn.lock matches package.json
          command: |
            if [[ ! "${CIRCLE_BRANCH}" =~ greenkeeper\/.* ]]; then
              [[ $(git diff --name-only yarn.lock) == "" ]] && exit 0
              echo ">> yarn.lock is out of date, run \"yarn\""
              git diff --no-pager yarn.lock
              exit 1
            fi
      - run:
          name: Compile Front-End Assets
          command: yarn prod
      - persist_to_workspace:
          root: .
          paths:
            - ./venv
            - ./node_modules
      - save_cache:
          key: v1-metashare-py-3.7-{{ checksum "Pipfile.lock" }}
          paths:
            - ./venv
      - save_cache:
          key: v1-metashare-npm-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

  lint:
    working_directory: ~/metashare
    docker:
      - image: wlonk/oddbird
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Lint
          command: |
            yarn lint

  test-client:
    working_directory: ~/metashare
    docker:
      - image: wlonk/oddbird
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Test JS
          command: yarn test:coverage
      - store_artifacts:
          path: coverage
          destination: js-reports
      - store_test_results:
          path: coverage
      - persist_to_workspace:
          root: .
          paths:
            - coverage

  test-python:
    working_directory: ~/metashare
    docker:
      - image: wlonk/oddbird
      - image: circleci/redis:latest
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: circle_test
          AWS_BUCKET_NAME: None
          AWS_SECRET_ACCESS_KEY: None
          AWS_ACCESS_KEY_ID: None
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Database Migrations
          command: |
            pipenv run python manage.py migrate --no-input
      - run:
          name: Test Python
          command: |
            pipenv run pytest --junitxml=pycov/pytest-junit.xml
      - store_artifacts:
          path: htmlcov
          destination: py-reports
      - store_test_results:
          path: pycov
      - persist_to_workspace:
          root: .
          paths:
            - .coverage

  report-test-coverage:
    working_directory: ~/metashare
    docker:
      - image: wlonk/oddbird
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Report Test Coverage
          command: |
            yarn pytest:report-coverage
            yarn test:report-coverage
            curl -k "https://coveralls.io/webhook?repo_token=${COVERALLS_REPO_TOKEN}" -d "payload[build_num]=${CIRCLE_BUILD_NUM}&payload[status]=done"
      - run:
          name: Check Test Coverage
          command: |
            yarn pytest:check-coverage
            yarn test:check-coverage

  build-docs:
    working_directory: ~/metashare
    docker:
      - image: wlonk/oddbird
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build Documentation
          command: |
            cd docs
            make html

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - lint:
          requires:
            - build
      - test-client:
          requires:
            - build
      - test-python:
          requires:
            - build
      - build-docs:
          requires:
            - build
      - report-test-coverage:
          requires:
            - test-client
            - test-python
